name: Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  # ビルドとテストの確認
  test:
    name: Test Before Deploy
    uses: ./.github/workflows/ci.yml

  # Vercelへのフロントエンドデプロイ
  deploy-frontend:
    name: Deploy Frontend to Vercel
    needs: test
    runs-on: ubuntu-latest
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Vercel CLI
      run: npm install -g vercel

    - name: Deploy to Vercel
      working-directory: ./frontend
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      run: |
        vercel pull --yes --environment=production --token=$VERCEL_TOKEN
        vercel build --prod --token=$VERCEL_TOKEN
        vercel deploy --prebuilt --prod --token=$VERCEL_TOKEN

  # バックエンドのデプロイ準備
  prepare-backend:
    name: Prepare Backend for Deploy
    needs: test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      working-directory: ./backend
      run: npm ci --production

    - name: Build backend
      working-directory: ./backend
      run: npm run build

    - name: Create deployment package
      run: |
        cd backend
        zip -r ../backend-deploy.zip dist package.json package-lock.json prisma .env.example

    - name: Upload deployment artifact
      uses: actions/upload-artifact@v4
      with:
        name: backend-deploy
        path: backend-deploy.zip

  # デプロイ成功通知
  notify:
    name: Deployment Notification
    needs: [deploy-frontend, prepare-backend]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Send deployment status
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { data: deployment } = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'production',
            description: 'Deployment to production',
            auto_merge: false,
            required_contexts: []
          });

          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deployment.id,
            state: 'success',
            environment_url: '${{ secrets.PRODUCTION_URL }}',
            description: 'Deployment completed successfully'
          });